<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- =========================================================
        Shiro Core Components - Not Spring Specific
        ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!--
    1. 配置 SecurityManager!
    -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 、Authenticator 才是真正的身份验证者，ShiroAPI 中核心的身份认证入口点，此处可以自定义插入自己的实现。-->
        <property name="authenticator" ref="authenticator"></property>

        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>

        <!-- 设置“记住我”的时间，也就是cookie时间 -->
        <property name="rememberMeManager.cookie.maxAge" value="10"></property>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!--
    2. 配置 CacheManager.
    2.1 需要加入 ehcache 的 jar 包及配置文件.
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="authenticator"
          class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--
    	3. 配置 Realm
    	3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
    -->
    <bean id="jdbcRealm" class="indi.sword.shiro.realms.ShiroRealm">
        <property name="credentialsMatcher">
        <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
            <property name="hashAlgorithmName" value="MD5"></property> <!-- 加密算法：会把前台过来的密码MD5加密 -->
            <property name="hashIterations" value="1024"></property> <!-- 加密再加密再加密，1024次数 -->
        </bean>
    </property>
    </bean>

    <bean id="secondRealm" class="indi.sword.shiro.realms.SecondRealm">
        <property name="credentialsMatcher">
        <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
            <property name="hashAlgorithmName" value="SHA1"></property>
            <property name="hashIterations" value="1024"></property>
        </bean>
    </property>
    </bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!--
    4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!--
    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--
    6. 配置 ShiroFilter.
    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.
    -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
<!--

        &lt;!&ndash;
        	配置哪些页面需要受保护.
        	以及访问这些页面需要的权限. 如果没有权限，会自动重定向到login.jsp页面
        	1). anon 可以被匿名访问 （anonymous 表示不需要登录就可以访问）
        	2). authc 必须认证(即登录)后才可能访问的页面.(authentication)
        	3). logout 登出.
        	4). roles 角色过滤器
        &ndash;&gt;
        &lt;!&ndash;因为用了上面那一句的 filterChainDefinitionMap，于是就不把角色配置写在这里了。&ndash;&gt;
        <property name="filterChainDefinitions">
            <value>
                &lt;!&ndash;
                    [urls]部分的配置，其格式是：“url=拦截器[参数]，拦截器[参数]”
                    如果当前请求的url匹配[urls]部分的某个url模式，将会执行其配置的拦截器。
                    org.apache.shiro.web.filter.mgt.DefaultFilter 查看拦截器种类
                &ndash;&gt;
                /login.jsp = anon
                /shiro/login = anon
                /shiro/logout = logout

                &lt;!&ndash;测试用&ndash;&gt;
                /shiro/testShiroAnnotation_guest = anon

                /user.jsp = roles[user]
                /admin.jsp = roles[admin]

                &lt;!&ndash;# everything else requires authentication:
                通配符wildcard，注意通配符匹配不包括目录分隔符 “/”.
                ？:匹配一个字符 ，如 /admin?  将匹配 /admin1,但是不匹配 /admin 或者子路径 /admin/1
                * :匹配一个或者多个字符，如 /admin* 将匹配 /admin /admin1 但是不匹配子路径 /admin/1
                **:匹配路径中的零个或者多个路径 ，如 /admin** 将匹配 /admin /admin1 admin/1 admin/a/b 等等&ndash;&gt;
                /** = authc

            </value>
        </property>
-->
    </bean>

    <!--&lt;!&ndash; 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 &ndash;&gt;-->
    <bean id = "filterChainDefinitionMap"
        factory-bean="FilterChainDefinitionMapBuilder" factory-method="buildFactoryChainDefinationMap">
    </bean>

    <bean id = "FilterChainDefinitionMapBuilder"
          class = "indi.sword.shiro.factory.FilterChainDefinitionMapBuilder"></bean>

    <!-- 把ShiroService配置到IOC容器中去 -->
    <bean id="shiroService"
          class="indi.sword.shiro.service.ShiroService"></bean>

<!--


    &lt;!&ndash; Session ID 生成器 &ndash;&gt;
    <bean id = "sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

    &lt;!&ndash; 会话管理器 &ndash;&gt;
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <property name="globalSessionTimeout" value="1800000" />
        <property name="deleteInvalidSessions" value="true" />
        <property name="sessionValidationSchedulerEnabled" value="true" />
        <property name="sessionDAO" ref="sessionDao" />
    </bean>

    &lt;!&ndash; Session Dao 继承EnterpriseCacheSessionDao &ndash;&gt;
    <bean id = "sessionDao" class="indi.sword.shiro.dao.MySessionDao">
        <property name="activeSessionsCache" value="shiro-activesSessionCache" />
        <property name="sessionIdGenerator" value="sessionIdGenerator" />
    </bean>

-->

    <!--

    &lt;!&ndash; 配置jdbc &ndash;&gt;
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    &lt;!&ndash; 配置数据源 &ndash;&gt;
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.driver" />
        <property name="url" value="jdbc::mysql//localhost:3306/myshirojdbcdb" />
        <property name="username" value="root" />
        <property name="password" value="123456" />
    </bean>
-->
</beans>